{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,SAAS;AACxD,cAAc;AACd;AACA,+CAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,iEAAe,QAAQ;;;;;;;;;;;;;;;;AC3He;AACJ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,WAAW;AAC9D,oDAAoD,cAAc;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,WAAW;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mDAAQ;AACxB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,wBAAwB,qDAAQ;AAChC,qBAAqB;AACrB,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,sBAAsB;;;;;;;;;;;;;;;;AChHC;AACD;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mDAAQ;AACpB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjgBAAgB,mDAAQ;AACxB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kDAAU;AAClC,qBAAqB;AACrB,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,gBAAgB;;;;;;;;;;;;;;;ACvK/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,iEAAe,KAAK,EAAC;;;;;;;;;;;;;;;AC1DrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,iEAAe,MAAM;;;;;;;;;;;;;;AC7CrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,iEAAe,MAAM;;;;;;UC5CrB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;ACNa;AACb;AACsC;AACA;AACF;AACwB;AACa;AAC/B;AAC1C;AACA;AACA;AACA;AACA,IAAI,2DAAM;AACV,IAAI,2DAAM;AACV,IAAI,0DAAK;AACT,IAAI,uEAAgB;AACpB,IAAI,8EAAsB;AAC1B,IAAI,6DAAQ;AACZ,CAAC;AACD;AACA;AACA","sources":["webpack://deliverx/./src/modules/carousel.js","webpack://deliverx/./src/modules/data-client-response-form.js","webpack://deliverx/./src/modules/data-register-form.js","webpack://deliverx/./src/modules/modal.js","webpack://deliverx/./src/modules/navbar.js","webpack://deliverx/./src/modules/servises.js","webpack://deliverx/./src/modules/slider.js","webpack://deliverx/webpack/bootstrap","webpack://deliverx/webpack/runtime/define property getters","webpack://deliverx/webpack/runtime/hasOwnProperty shorthand","webpack://deliverx/webpack/runtime/make namespace object","webpack://deliverx/./src/index.js"],"sourcesContent":["function carousel() {\r\n    // Open Carousel Clients \\\\\r\n\r\n    const carouselWrapper = document.querySelector('.clients__card-wrapper');\r\n\r\n    function createCarousel() {\r\n\r\n        const carouselWrapperWidth = parseFloat(window.getComputedStyle(carouselWrapper).width),\r\n            carouselInner = document.querySelector('.clients__card-inner'),\r\n            btnPrev = document.querySelector('.slider__btn_left'),\r\n            btnNext = document.querySelector('.slider__btn_right'),\r\n            bgCards = document.querySelectorAll('.bg');\r\n\r\n        const cardToSlide = 3,\r\n            bgCardArray = [];\r\n\r\n        let position = 0,\r\n            cardToShow;\r\n\r\n        if (carouselWrapperWidth > 1200) {\r\n            cardToShow = 3;\r\n        } else if (carouselWrapperWidth < 1200 && carouselWrapperWidth >= 700) {\r\n            cardToShow = 2;\r\n        } else if (carouselWrapperWidth < 700) {\r\n            cardToShow = 1;\r\n        }\r\n\r\n        bgCards.forEach(item => {\r\n            const bgItemsWidth = item.style.minWidth = (carouselWrapperWidth / cardToShow) + 'px';\r\n            bgCardArray.push(bgItemsWidth);\r\n        });\r\n\r\n        let bgCardArrayLength;\r\n\r\n        if (carouselWrapperWidth < 1200 && carouselWrapperWidth >= 700) {\r\n            bgCardArrayLength = bgCardArray.length - 2;\r\n        } else if (carouselWrapperWidth < 700) {\r\n            bgCardArrayLength = bgCardArray.length - 1;\r\n        } else {\r\n            bgCardArrayLength = bgCardArray.length - 3;\r\n        }\r\n\r\n        let itemWidth = bgCardArray[cardToSlide],\r\n            cardWidth = parseFloat(itemWidth.slice(0, itemWidth.length - 2));\r\n\r\n        function nextCard() {\r\n            position += cardWidth;\r\n            carouselInner.style.left = `-${position}px`;\r\n\r\n            if (position > cardWidth * (bgCardArrayLength)) {\r\n                position = 0;\r\n                carouselInner.style.left = `${position}px`;\r\n            }\r\n        }\r\n\r\n        function prevCard() {\r\n            if (position <= 0) {\r\n                position = position + cardWidth * (bgCardArrayLength);\r\n                carouselInner.style.left = `-${position}px`;\r\n            } else {\r\n                position = position - cardWidth;\r\n                carouselInner.style.left = `-${position}px`;\r\n            }\r\n        }\r\n\r\n        btnNext.addEventListener('click', () => {\r\n            nextCard();\r\n        });\r\n\r\n        btnPrev.addEventListener('click', () => {\r\n            prevCard();\r\n        });\r\n\r\n        return {\r\n            nextCard,\r\n            prevCard,\r\n            bgCardArray,\r\n        };\r\n    }\r\n\r\n    const carousel = createCarousel();\r\n\r\n    // Close Carousel Clients \\\\\r\n\r\n    // Open Swipe Carousel \\\\\r\n\r\n    let touchStartX;\r\n\r\n    carouselWrapper.addEventListener('touchstart', handleTouchStart);\r\n    carouselWrapper.addEventListener('touchmove', handleTouchMove);\r\n    carouselWrapper.addEventListener('touchend', handleTouchEnd);\r\n\r\n\r\n    function handleTouchStart(event) {\r\n        touchStartX = event.touches[0].clientX;\r\n    }\r\n\r\n    function handleTouchMove(event) {\r\n        if (!touchStartX) return;\r\n\r\n        const touchEndX = event.touches[0].clientX;\r\n        const deltaX = touchEndX - touchStartX;\r\n\r\n        if (deltaX > 0) {\r\n            carousel.prevCard();\r\n        } else if (deltaX < 0) {\r\n            carousel.nextCard();\r\n        }\r\n\r\n        touchStartX = null;\r\n    }\r\n\r\n    function handleTouchEnd() {\r\n        touchStartX = null;\r\n    }\r\n\r\n    window.addEventListener('resize', () => {\r\n        createCarousel();\r\n    });\r\n\r\n    // Close Swipe Carousel \\\\\r\n}\r\n\r\nexport default carousel;","import { postData } from \"./servises\";\r\nimport carousel from \"./carousel\";\r\n\r\nfunction dataClientResponseForm() {\r\n    // Open Get Data Client Response Form  \\\\\r\n\r\n    const clentRensposeForm = document.querySelector('.block__textarea_content'),\r\n        cardsInner = document.querySelector('.clients__card-inner'),\r\n        warningtext = document.querySelector('.warning__text'),\r\n        responseClient = document.querySelector('#clientTextarea'),\r\n        clientNameInput = document.querySelector('#clientName'),\r\n        clientAddressInput = document.querySelector('#clientAddress'),\r\n        counterLength = document.querySelector('.counter__length');\r\n\r\n    function createClientCard(text, name, address) {\r\n        cardsInner.insertAdjacentHTML('afterbegin', `\r\n            <div class=\"bg\">\r\n                <div class=\"clients__card\">\r\n                    <div class=\"card__user d-flex justify-content-between align-items-center mb-4\">\r\n                        <div class=\"user__info d-flex\">\r\n                            <div class=\"user__image me-2\">\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"64\" height=\"64\" fill=\"currentColor\" class=\"bi bi-person-circle\" viewBox=\"0 0 16 16\">\r\n                                    <path d=\"M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0\"/>\r\n                                    <path fill-rule=\"evenodd\" d=\"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8m8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1\"/>\r\n                                </svg>\r\n                            </div>\r\n                            <div class=\"user__name d-flex flex-column justify-content-center\">\r\n                                <h5 class=\"name\">${name.value}</h5>\r\n                                <p class=\"addres\">${address.value}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"card__mark\">\r\n                            <input type=\"checkbox\" name=\"\" id=\"client__mark\">\r\n                            <span class=\"mark_heart\"></span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"card__user-text\">\r\n                        <p class=\"card_md_text text-start\">${text.value}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `);\r\n    }\r\n\r\n    function checkEmptyClientsInput(input) {\r\n        const inputEmpty = input.value.trim() == '';\r\n        if (inputEmpty) {\r\n            warningtext.innerHTML = 'The field must be filled';\r\n        } else {\r\n            warningtext.innerHTML = '';\r\n        }\r\n\r\n        return !inputEmpty;\r\n    }\r\n\r\n    function countLength(input, counter, maxLength) {\r\n        input.addEventListener('input', () => {\r\n            let inputTextLength = input.value.length;\r\n            counter.innerHTML = inputTextLength + ' / ' + maxLength\r\n        });\r\n    }\r\n\r\n    countLength(responseClient, counterLength, 150);\r\n\r\n    clientNameInput.addEventListener('input', () => {\r\n        checkEmptyClientsInput(clientNameInput);\r\n    });\r\n\r\n    clientAddressInput.addEventListener('input', () => {\r\n        checkEmptyClientsInput(clientAddressInput);\r\n    });\r\n\r\n    responseClient.addEventListener('input', () => {\r\n        checkEmptyClientsInput(responseClient);\r\n    });\r\n\r\n    function postClientResponseData(form) {\r\n        form.addEventListener('submit', (e) => {\r\n            e.preventDefault();\r\n\r\n            const isClientNameInputEmpty = checkEmptyClientsInput(clientNameInput),\r\n                isClientAddressInputEmpty = checkEmptyClientsInput(clientAddressInput),\r\n                isResponseClientEmpty = checkEmptyClientsInput(responseClient);\r\n\r\n\r\n            if (isClientNameInputEmpty && isClientAddressInputEmpty && isResponseClientEmpty) {\r\n                const singUpData = new FormData(form);\r\n                const jsonSingUp = JSON.stringify(Object.fromEntries(singUpData.entries()));\r\n\r\n                postData('http://localhost:3000/requestClietnResponse', jsonSingUp)\r\n                    .then(data => {\r\n                        console.log(data);\r\n                        createClientCard(responseClient, clientNameInput, clientAddressInput);\r\n                    })\r\n                    .catch(() => {\r\n                        console.log('Щось пішло не так!');\r\n                    })\r\n                    .finally(() => {\r\n                        form.reset();\r\n                        carousel();\r\n                    });\r\n            } else {\r\n                warningtext.innerHTML = 'The field must be filled';\r\n            }\r\n        });\r\n    }\r\n\r\n    postClientResponseData(clentRensposeForm);\r\n\r\n    // Close Get Data Client Response Form  \\\\\r\n}\r\n\r\nexport default dataClientResponseForm;","import { postData } from \"./servises\";\r\nimport { closeModal } from \"./modal\";\r\n\r\nfunction dataRegisterForm(logIn, singUp) {\r\n    // Open Get Data Register Form  \\\\\r\n\r\n    const formSingUp = document.querySelector('.sing-up__modal-body'),\r\n        formLogIn = document.querySelector('.sing-in__modal-body');\r\n\r\n    const inputFullName = document.querySelector('#input__full-name'),\r\n        inputPassword = document.querySelector('#inputPassword'),\r\n        inputConfirmPassword = document.querySelector('#inputConfirmPassword'),\r\n        inputEmailAddress = document.querySelector('#input__email-address'),\r\n        inputCheckPrivasy = document.querySelector('#checkbox__privacy'),\r\n        blockNameMark = document.querySelector('.input__full-name'),\r\n        blockEmailMark = document.querySelector('.input__email'),\r\n        blockPasswordMark = document.querySelector('#block__password'),\r\n        blockConfirmMark = document.querySelector('#block__confirm-password'),\r\n        btnPassswordHide = document.querySelectorAll('.password__hide');\r\n\r\n    function postLogInData(form) {\r\n        form.addEventListener('submit', (e) => {\r\n            e.preventDefault();\r\n            const logInData = new FormData(form);\r\n            const jsonLogIn = JSON.stringify(Object.fromEntries(logInData.entries()));\r\n\r\n            postData('http://localhost:3000/requestsLogIn', jsonLogIn)\r\n                .then(data => {\r\n                    console.log(data);\r\n                })\r\n                .catch(() => {\r\n                    console.log('Щось пішло не так!');\r\n                })\r\n                .finally(() => {\r\n                    form.reset();\r\n                })\r\n        });\r\n    }\r\n\r\n    function checkEmptyInput(input, parentBlock) {\r\n        const emptyInput = input.value.trim() == '';\r\n\r\n        if (emptyInput) {\r\n            parentBlock.classList.remove('success');\r\n            parentBlock.classList.add('warning');\r\n        } else {\r\n            parentBlock.classList.remove('warning');\r\n            parentBlock.classList.add('success');\r\n        }\r\n        return !emptyInput;\r\n    }\r\n\r\n    function showPassword(checkbox) {\r\n        const checkboxTarget = checkbox.getAttribute('data-target');\r\n        let inputPass = document.getElementById(checkboxTarget);\r\n\r\n\r\n        if (checkbox.checked) {\r\n            inputPass.type = 'text';\r\n        } else {\r\n            inputPass.type = 'password';\r\n        }\r\n    }\r\n\r\n    function checkSamePasswords(input) {\r\n\r\n        const samePasswords = inputPassword.value === inputConfirmPassword.value;\r\n        const passwordMinLength = input.value.length >= 8;\r\n\r\n        if (samePasswords && passwordMinLength) {\r\n            blockPasswordMark.classList.remove('warning');\r\n            blockPasswordMark.classList.add('success');\r\n\r\n            blockConfirmMark.classList.remove('warning');\r\n            blockConfirmMark.classList.add('success');\r\n        } else {\r\n            blockPasswordMark.classList.remove('success');\r\n            blockPasswordMark.classList.add('warning');\r\n\r\n            blockConfirmMark.classList.remove('success');\r\n            blockConfirmMark.classList.add('warning');\r\n        }\r\n        return samePasswords && passwordMinLength;\r\n    }\r\n\r\n    function checkEmailCondition(input, parentBlock) {\r\n        const reg = /@gmail\\.com/ig;\r\n        const text = reg.test(input.value);\r\n        if (text) {\r\n            parentBlock.classList.remove('warning');\r\n            parentBlock.classList.add('success');\r\n        } else {\r\n            parentBlock.classList.remove('success');\r\n            parentBlock.classList.add('warning');\r\n        }\r\n        return text;\r\n    }\r\n\r\n    function removeSucceseClass(block) {\r\n        block.classList.remove('success', 'warning');\r\n    }\r\n\r\n    btnPassswordHide.forEach(item => {\r\n        item.addEventListener('click', () => {\r\n            showPassword(item);\r\n        });\r\n    });\r\n\r\n    inputFullName.addEventListener('input', () => {\r\n        checkEmptyInput(inputFullName, blockNameMark);\r\n    });\r\n\r\n    inputEmailAddress.addEventListener('input', () => {\r\n        checkEmptyInput(inputEmailAddress, blockEmailMark);\r\n        checkEmailCondition(inputEmailAddress, blockEmailMark);\r\n    });\r\n\r\n    inputPassword.addEventListener('input', () => {\r\n        checkSamePasswords(inputPassword);\r\n    });\r\n\r\n    inputConfirmPassword.addEventListener('input', () => {\r\n        checkSamePasswords(inputConfirmPassword);\r\n    });\r\n\r\n    function postSingUpData(form) {\r\n        form.addEventListener('submit', (e) => {\r\n            e.preventDefault();\r\n\r\n            const isFullNameValid = checkEmptyInput(inputFullName, blockNameMark),\r\n                isEmailValid = checkEmptyInput(inputEmailAddress, blockEmailMark),\r\n                isPasswordValid = checkSamePasswords(inputPassword),\r\n                isEmailCondition = checkEmailCondition(inputEmailAddress, blockEmailMark),\r\n                isConfirmPasswordValid = checkSamePasswords(inputConfirmPassword),\r\n                isCheckboxChecked = inputCheckPrivasy.checked;\r\n\r\n            if (isFullNameValid && isEmailValid && isEmailCondition && isConfirmPasswordValid && isPasswordValid && isCheckboxChecked) {\r\n                const singUpData = new FormData(form);\r\n                const jsonSingUp = JSON.stringify(Object.fromEntries(singUpData.entries()));\r\n\r\n                postData('http://localhost:3000/requestsSingUp', jsonSingUp)\r\n                    .then(data => {\r\n                        console.log(data);\r\n                    })\r\n                    .catch(() => {\r\n                        console.log('Щось пішло не так!');\r\n                    })\r\n                    .finally(() => {\r\n                        form.reset();\r\n                        removeSucceseClass(blockNameMark);\r\n                        removeSucceseClass(blockEmailMark);\r\n                        removeSucceseClass(blockPasswordMark);\r\n                        removeSucceseClass(blockConfirmMark);\r\n                        closeModal(logIn, singUp);\r\n                    });\r\n            } else {\r\n                console.log('Не виконані умови для відправлення форми.');\r\n            }\r\n        });\r\n    }\r\n\r\n    postSingUpData(formSingUp);\r\n    postLogInData(formLogIn);\r\n\r\n    // Close Get Data Register Form  \\\\\r\n}\r\n\r\nexport default dataRegisterForm;","function closeModal(logIn, singUp) {\r\n    const modalLogIn = document.querySelector(logIn),\r\n        modalSingUp = document.querySelector(singUp);\r\n\r\n    modalLogIn.classList.remove('show');\r\n    modalLogIn.classList.remove('show-two');\r\n    modalSingUp.classList.remove('show-two');\r\n    document.body.style.overflow = '';\r\n}\r\n\r\n\r\nfunction modal(logIn, singUp) {\r\n    // Open Modal \\\\\r\n\r\n    const modalLogIn = document.querySelector(logIn),\r\n        modalSingUp = document.querySelector(singUp),\r\n        btnOpenModal = document.querySelectorAll('[data-btn-register]'),\r\n        btnCloseModal = document.querySelectorAll('[data-close-modal]'),\r\n        btnLogIn = document.querySelector('[data-open-log-in]'),\r\n        btnSingUp = document.querySelector('[data-open-sing-up]');\r\n\r\n\r\n    function openModal() {\r\n        modalLogIn.classList.add('show');\r\n        document.body.style.overflow = 'hidden';\r\n    }\r\n\r\n    btnOpenModal.forEach(item => {\r\n        item.addEventListener('click', () => {\r\n            openModal();\r\n        });\r\n    });\r\n\r\n    btnCloseModal.forEach(item => {\r\n        item.addEventListener('click', () => {\r\n            closeModal(logIn, singUp);\r\n        });\r\n    });\r\n\r\n    btnSingUp.addEventListener('click', () => {\r\n        modalLogIn.classList.add('show-two');\r\n        modalSingUp.classList.add('show-two');\r\n    });\r\n\r\n    btnLogIn.addEventListener('click', () => {\r\n        modalLogIn.classList.remove('show-two');\r\n        modalSingUp.classList.remove('show-two');\r\n    });\r\n\r\n    document.addEventListener('keydown', (e) => {\r\n        if (e.code === 'Escape' && modalLogIn.classList.contains('show')) {\r\n            closeModal();\r\n        }\r\n    });\r\n\r\n    // Close Modal \\\\\r\n}\r\n\r\nexport default modal;\r\nexport { closeModal }","\r\nfunction navBar() {\r\n    // Open Navbar Toggle \\\\\r\n\r\n    const navbarBtn = document.querySelector('.navbar__toggler'),\r\n        navbarMenu = document.querySelector('.navbar'),\r\n        body = document.querySelector('body'),\r\n        navLink = document.querySelectorAll('.nav-link'),\r\n        checkBox = document.querySelector('.mode__control'),\r\n        mode = document.querySelector('.mode');\r\n\r\n    // Open Navbar Checkbox Toggle \\\\\r\n\r\n    if (localStorage.getItem('darkMode') === ('change')) {\r\n        mode.classList.add('anim__checkbox');\r\n        body.classList.add('anim__mode');\r\n    }\r\n\r\n    checkBox.addEventListener('click', (e) => {\r\n        e.preventDefault();\r\n        if (localStorage.getItem('darkMode') === ('change')) {\r\n            localStorage.removeItem('darkMode');\r\n            mode.classList.remove('anim__checkbox');\r\n            body.classList.remove('anim__mode');\r\n        } else {\r\n            localStorage.setItem('darkMode', 'change');\r\n            mode.classList.add('anim__checkbox');\r\n            body.classList.add('anim__mode');\r\n        }\r\n    })\r\n\r\n    // Close Navbar Checkbox Toggle \\\\\r\n\r\n    navbarBtn.addEventListener('click', (e) => {\r\n        e.preventDefault();\r\n        navbarMenu.classList.toggle('active__toggler_menu');\r\n        body.classList.toggle('lock');\r\n        navLink.forEach(item => {\r\n            item.classList.toggle('anim_border');\r\n        })\r\n    })\r\n\r\n    // Close Navbar Toggle \\\\\r\n}\r\n\r\nexport default navBar;","const postData = async (url, data) => {\r\n    const res = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Content-type': 'application/json',\r\n        },\r\n        body: data\r\n    });\r\n\r\n    return await res.json();\r\n}\r\n\r\nexport { postData };","function slider() {\r\n    // Open Slider Retaurant \\\\\r\n\r\n    const cards = document.querySelectorAll('.why-our__card'),\r\n        nextBtn = document.querySelector('.btn__next'),\r\n        prevBtn = document.querySelector('.btn__prev');\r\n\r\n    let cardIndex = 1;\r\n\r\n    showCards(cardIndex);\r\n\r\n    function showCards(n) {\r\n        if (n > cards.length) {\r\n            cardIndex = 1;\r\n        }\r\n\r\n        if (n < 1) {\r\n            cardIndex = cards.length;\r\n        }\r\n\r\n        cards.forEach(item => item.style.cssText = `\r\n            opacity: 0;\r\n        `);\r\n\r\n        cards[cardIndex - 1].style.cssText = `\r\n            opacity: 1;\r\n        `;\r\n    }\r\n\r\n    function plusCards(n) {\r\n        showCards(cardIndex += n);\r\n    }\r\n\r\n    prevBtn.addEventListener('click', () => {\r\n        plusCards(-1);\r\n    });\r\n\r\n    nextBtn.addEventListener('click', () => {\r\n        plusCards(1);\r\n    });\r\n\r\n    // Close Slider Retaurant \\\\\r\n}\r\n\r\nexport default slider;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","'use strict';\r\n\r\nimport slider from './modules/slider';\r\nimport navBar from './modules/navbar';\r\nimport modal from './modules/modal';\r\nimport dataRegisterForm from './modules/data-register-form';\r\nimport dataCleintResponseForm from './modules/data-client-response-form';\r\nimport carousel from './modules/carousel';\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n\r\n\r\n    slider();\r\n    navBar();\r\n    modal('.modal__sing-in', '.modal__sing-up');\r\n    dataRegisterForm('.modal__sing-in', '.modal__sing-up');\r\n    dataCleintResponseForm();\r\n    carousel();\r\n})\r\n\r\n\r\n\r\n"],"names":[],"sourceRoot":""}